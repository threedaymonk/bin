#!/usr/bin/env ruby

# Adapted from
# http://www.pragmaticautomation.com/cgi-bin/pragauto.cgi/Monitor/StakingOutFileChanges.rdoc

if ARGV.size < 2
  puts "Usage: stakeout <command> [files to watch]+"
  exit 1
end

command = ARGV.shift
files = {}

ARGV.each do |arg|
  Dir[arg].each do |file|
    files[file] = File.mtime(file)
  end
end

colors = {
  :red    => "\e[1;31m",
  :green  => "\e[1;32m",
  :yellow => "\e[1;33m",
  :reset  => "\e[0m"
}

loop do
  sleep 1

  changed_file, last_changed = files.find { |file, last_changed|
    begin
      File.mtime(file) > last_changed
    rescue Errno::ENOENT # Gracefully handle race condition
      false
    end
  }

  if changed_file
    files[changed_file] = File.mtime(changed_file)
    puts colors[:yellow] + "=> #{changed_file} changed, running #{command}" + colors[:reset]

    system(command)

    print colors[$? == 0 ? :green : :red]
    puts "=> done" + colors[:reset]
  end
end
