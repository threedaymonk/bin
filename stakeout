#!/usr/bin/env ruby

# Adapted from
# http://www.pragmaticautomation.com/cgi-bin/pragauto.cgi/Monitor/StakingOutFileChanges.rdoc

if ARGV.size < 3 || !ARGV.include?('-')
  puts 'Usage: stakeout <command> - <glob(s)>'
  exit 1
end

def expand_files(globs)
  {}.tap { |files|
    globs.each do |glob|
      Dir[glob].each do |file|
        files[file] =
          begin
            File.mtime(file)
          rescue Errno::ENOENT # Gracefully handle race condition
            0
          end
      end
    end
  }
end

split = ARGV.index("-")
command = ARGV[0, split].join(" ")
globs = ARGV[(split + 1) .. -1]
files_a = expand_files(globs)

ESCAPE_SEQUENCES = {
  red: '1;31m',
  green: '1;32m',
  yellow: '1;33m',
  reset: '0m',
}

def escape_sequence(*names)
  names.each do |name|
    print "\e[#{ESCAPE_SEQUENCES[name]}"
  end
end

loop do
  sleep 1

  files_b = expand_files(globs)

  removed = files_a.keys - files_b.keys
  added   = files_b.keys - files_a.keys
  changed = (files_a.keys & files_b.keys).select { |f|
    files_a[f] != files_b[f]
  }

  files_a = files_b

  if (removed + added + changed).any?
    escape_sequence :yellow
    added.each do |f|
      puts "=> #{f} added"
    end
    removed.each do |f|
      puts "=> #{f} removed"
    end
    changed.each do |f|
      puts "=> #{f} changed"
    end
    puts command
    escape_sequence :reset

    system(command)

    color = $? == 0 ? :green : :red
    escape_sequence color
    puts "=> done"
    escape_sequence :reset
  end
end
