#!/usr/bin/env ruby

require 'net/http'
require 'uri'
require 'pp'

#IPHONE_UA  = 'Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3'
IPHONE_UA = 'Mozilla/5.0 (iPod; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/4A93 Safari/419.3'
QT_UA      = 'Apple iPhone v1.1.3 CoreMedia v1.0.0.4A93'
DEFAULT_HEADERS = {
  'Accept'          => '*/*',
  'Accept-Language' => 'en',
  'Accept-Encoding' => 'gzip, deflate',
  'Connection'      => 'keep-alive',
  'Pragma'          => 'no-cache'
}

class Net::HTTPResponse # Monkey-patch in some 21st-century functionality
  include Enumerable
  
  def cookies
    inject([]){ |acc, (key, value)|
      key == 'set-cookie' ? acc << value.split(/;/).first : acc
    }
  end
  
  def to_hash
    @to_hash ||= inject({}){ |hash, (key, value)|
      hash[key] = value
      hash
    }
  end
end

def http_get(location, headers={})
  url = URI.parse(location)
  http = Net::HTTP.new(url.host, url.port)
  path = url.path
  if url.query
    path << '?' << url.query
  end
  http.get(path, DEFAULT_HEADERS.merge(headers))
end

page_url, title, = ARGV

unless page_url
  puts "Download DRM-free videos from the BBC iPlayer, courtesy of their iPhone interface."
  puts
  puts "Usage: #{$0} URL (name)"
  puts "Where URL is the iPlayer viewing page and name is an optional filename (.mp4 is added automatically)."
  exit 1
end

headers = {
}
response, html = http_get( page_url,
                           'User-Agent' => IPHONE_UA )
cookies = response.cookies.join('; ')

pid = html[/\bpid[ \t]+:[ \t]+'([a-z0-9]+)'/, 1]
title ||= html[%r!<title>([^<]+)</title>!, 1].split(/ - /).last

filename = "#{ title }.mp4"
r = (rand * 10000000).floor
selector = "http://www.bbc.co.uk/mediaselector/3/auth/iplayer_streaming_http_mp4/#{ pid }?#{r}"

response, body = http_get( selector, 
                           'Cookie'     => cookies,
                           'User-Agent' => QT_UA,
                           'Range'      => 'bytes=0-1' )
location = response.to_hash['location']

pp response.to_hash

response, body = http_get( location,
                           'User-Agent'      => QT_UA,
                           'Range'           => 'bytes=0-1',
                           'Cookie'          => cookies )

pp response.to_hash
p body
