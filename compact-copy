#!/usr/bin/env ruby
require "optparse"
require "find"
require "fileutils"

options = {
  :ignore  => [],
  :verbose => 0
}
optparser = OptionParser.new{ |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] source destination"
  opts.on( "-i", "--ignore PATTERN", "Skip files matching regular expression" ) do |pattern|
    options[:ignore] << pattern
  end
  opts.on( "-v", "--verbose", "Increase verbosity" ) do
    options[:verbose] += 1
  end
  opts.on( "-h", "--help", "Display this screen" ) do
    puts opts
    exit
  end
}
optparser.parse!

def hash(path)
  `sha256sum -b "#{path}"`[/^\S+/]
end

def hash_to_path(hash)
  directories = hash.scan(/../)[0, 4]
  File.join([".by_hash"] + directories + [hash])
end

if options[:verbose] > 0
  def verbose(s)
    puts s
  end
else
  def verbose(s)
  end
end

source, dest, = ARGV
dest = File.expand_path(dest)
FileUtils.mkdir_p dest
ignore =
  if options[:ignore].any?
    Regexp.new(options[:ignore].map{ |s| Regexp.new(s) }.join("|"))
  else
    nil
  end

Dir.chdir(source) do
  Find.find(".") do |path|
    dest_path = File.join(dest, path)
    if ignore && ignore.match(path)
      verbose "Ignore #{path}"
      Find.prune
    elsif File.exist?(dest_path)
      verbose "Skip existing #{path}"
    elsif File.symlink?(path)
      origin = File.readlink(path)
      verbose "Symlink #{origin} -> #{path}"
      FileUtils.ln_sf origin, dest_path
    elsif File.directory?(path)
      FileUtils.mkdir_p dest_path
    else
      h = hash(path)
      if h
        short_h = h[/^.{8}/]
        canonical = File.join(dest, hash_to_path(h))
        if File.exist?(canonical)
          verbose "Link #{short_h} -> #{path}"
        else
          verbose "Copy & link #{short_h} -> #{path}"
          FileUtils.mkdir_p File.dirname(canonical)
          FileUtils.cp path, canonical
        end
        FileUtils.ln canonical, dest_path
      else
        verbose "Error reading #{path}"
      end
    end
  end
end
