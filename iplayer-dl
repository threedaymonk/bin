#!/usr/bin/env ruby

require 'net/http'
require 'uri'

IPHONE_UA  = 'Mozilla/5.0 (iPhone; U; CPU like Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) Version/3.0 Mobile/1A543a Safari/419.3'
QT_UA      = 'Apple iPhone v1.1.3 CoreMedia v1.0.0.4A93'
DEFAULT_HEADERS = {
  'Accept'          => '*/*',
  'Accept-Language' => 'en',
  'Accept-Encoding' => 'gzip, deflate',
  'Connection'      => 'keep-alive',
  'Pragma'          => 'no-cache'
}

class Net::HTTPResponse # Monkey-patch in some 21st-century functionality
  include Enumerable
  
  def cookies
    inject([]){ |acc, (key, value)|
      key == 'set-cookie' ? acc << value.split(/;/).first : acc
    }
  end
  
  def to_hash
    @to_hash ||= inject({}){ |hash, (key, value)|
      hash[key] = value
      hash
    }
  end
end

page_url = ARGV[0]

unless page_url
  puts "Download DRM-free videos from the BBC iPlayer, courtesy of their iPhone interface."
  puts
  puts "Usage: #{$0} URL (name)"
  puts "Where URL is the iPlayer viewing page and name is an optional filename (.mp4 is added automatically)."
  exit 1
end

url = URI.parse(ARGV[0])
http = Net::HTTP.new(url.host, url.port)
headers = {
  'User-Agent' => IPHONE_UA
}
response, html = http.get(url.path, headers)
cookies = response.cookies
p cookies

pid = html[/\bpid[ \t]+:[ \t]+'([a-z0-9]+)'/, 1] or die "Couldn't find PID."
title = html[%r!<title>([^<]+)</title>!, 1].split(/ - /).last

r = (rand * 10000000).floor
r = 467833

headers = DEFAULT_HEADERS.merge(
  'Cookie'     => cookies.join('; '),
  'User-Agent' => QT_UA,
  'Range'      => 'bytes=0-1'
)

filename = "#{ ARGV[1] || title }.mp4"
selector = "http://www.bbc.co.uk/mediaselector/3/auth/iplayer_streaming_http_mp4/#{ pid }?#{r}"
puts " => #{ filename }"

url = URI.parse(selector)
http = Net::HTTP.new(url.host, url.port)
headers = {
  'Cookie'     => cookies.join('; '),
  'User-Agent' => QT_UA,
  'Range'      => 'bytes=0-1'
}
response, body = http.get(url.path, headers)
location = response.to_hash['location']
p location

url = URI.parse(location)
http = Net::HTTP.new(url.host, url.port)
headers = DEFAULT_HEADERS.merge(
  'User-Agent'      => QT_UA,
  'Range'           => 'bytes=0-1',
  'Cookie'          => cookies.join('; ')
)
response, body = http.get(url.path, headers)

p response.to_hash
p body
