#!/usr/bin/env ruby
require "stringio"
$stderr = StringIO.new # Silence Nokogiri's whining
require "mechanize"
$stderr = STDERR

class Line
  class Status
    STATUS_COLORS = {
      "Good service"    => "green",
      "Minor delays"    => "yellow",
      "Severe delays"   => "orange",
      "Part closure"    => "red",
      "Part suspended"  => "red",
      "Planned closure" => "red",
    }
    STATUS_COLORS.default = "red"

    def initialize(text)
      @text = text
    end

    def color
      STATUS_COLORS[@text]
    end

    def ok?
      @text == "Good service"
    end

    def description
      @text.gsub(/[^a-z, ]+/i, "")
    end
  end

  attr_reader :name, :short_name, :color, :statuses
  def initialize(color, name, short_name=nil)
    @color      = color
    @name       = name
    @short_name = short_name || name
    @statuses   = [Status.new("ERROR")]
  end

  def status=(s)
    @statuses = s.split(/\s*,\s*/).map{ |t| Status.new(t) }
  end

  def ok?
    statuses.all?{ |s| s.ok? }
  end
end

lines = {
  "bakerloo"           => Line.new("#AE6118", "Bakerloo"),
  "central"            => Line.new("#E41F1F", "Central"),
  "circle"             => Line.new("#F8D42D", "Circle"),
  "district"           => Line.new("#00A575", "District"),
  "hammersmithandcity" => Line.new("#E899A8", "Hammersmith & City", "H & C"),
  "jubilee"            => Line.new("#8F989E", "Jubilee"),
  "metropolitan"       => Line.new("#893267", "Met.", "Metropolitan"),
  "northern"           => Line.new("#000000", "Northern"),
  "piccadilly"         => Line.new("#0450A1", "Piccadilly"),
  "victoria"           => Line.new("#009FE0", "Victoria"),
  "waterlooandcity"    => Line.new("#70C3CE", "Waterloo & City", "W & C"),
}

agent = WWW::Mechanize.new
page   = agent.get('http://www.tfl.gov.uk/tfl/livetravelnews/realtime/tube/default.html')
page.search("#lines li").each do |li|
  line_key = li.search("h3").first["class"].split(/ /).first
  status = (li.search("h4").first || li.search("div").first).text
  line = lines[line_key]
  next unless line
  line.status = status
end

lines_with_problems = lines.values.reject{ |l| l.ok? }
name_width = lines_with_problems.map{ |l| l.short_name.length }.max
lines_with_problems.sort_by{ |l| l.name.upcase }.each do |line|
  line.statuses.each_with_index do |status, i|
    if i == 0
      print "${color #{line.color}}â—† ${color grey}#{line.short_name.ljust(name_width)}"
    else
      print "  ", " " * name_width
    end
    puts " ${color #{status.color}}#{status.description}$color"
  end
end

if lines_with_problems.empty?
  puts "${color grey}All ${color green}Good service$color"
end
